name: Build apache image

on:
  push:
    paths:
      - 'apache/**'
      - '!apache/README.md'
      - '.github/workflows/apache.yml'
  pull_request:
    paths:
      - 'apache/**'
      - '!apache/README.md'
      - '.github/workflows/apache.yml'

# write permission implies read permission.
permissions:
  # for create release tag
  contents: write
  # for push to ghcr.io registry.
  packages: write
  

jobs:
  build-image:
    strategy:
      matrix:
        entry:
          - { VARIANT: '2.4'}
    name: packaging apache image
    runs-on: ubuntu-latest
    env:
      # IMAGE_NAME: ubi-devcontainer
      IMAGE_NAME: ${{ github.repository }}
      REGISTRY: ghcr.io
    steps:

    - uses: actions/checkout@v4

    # github action persist timezone is UTC.
    - name: Set current datetime for use.
      id: current
      run: echo "datetime=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          apache
          apache_${{ matrix.entry.VARIANT }}
          apache_${{ matrix.entry.VARIANT }}_${{ steps.current.outputs.datetime }}
          ${{ github.sha }}

    # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        build-args: |
          VARIANT=${{ matrix.entry.VARIANT }}
        file: apache/Containerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        